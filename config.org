#+title: Dotfiles

* Emacs
  :PROPERTIES:
  :header-args: :tangle ~/.emacs
  :END:

other settings
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)      ; Disables the startup message
  (menu-bar-mode -1)                    ; Disables the menu bar
  (tooltip-mode -1)                     ; Disables tooltips
  (tool-bar-mode -1)                    ; Disables the tool bar
  (scroll-bar-mode -1)                  ; Disables the scroll bar
  (global-display-line-numbers-mode)    ; Enables line numbers
  (setq column-number-mode t)           ; Enables column numbers
  
  (load-theme 'wombat)

    ;; Initialize package sources
    (require 'package)

    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
	   ("org" . "https://orgmode.org/elpa/")
	   ("elpa" . "https://elpa.gnu.org/packages")))

    (package-initialize)
    (unless package-archive-contents
    (package-refresh-contents))

    ;; initialize use-package on non-Linux platform
    (unless (package-installed-p 'use-package)
    (package-install 'use-package))

    (require 'use-package)
    (setq use-package-always-ensure t)

    (use-package diminish)
#+end_src

meghanada (java lsp)
https://github.com/mopemope/meghanada-emacs
#+begin_src emacs-lisp
  (use-package meghanada)
  (require 'meghanada)
  (add-hook 'java-mode-hook
    (lambda ()
      ;; meghanada-mode on
      (meghanada-mode t)
      (flycheck-mode +1)
      (setq c-basic-offset 2)
      ;; use code format
      (add-hook 'before-save-hook 'meghanada-code-beautify-before-save)))
    (cond
    ((eq system-type 'windows-nt)
      (setq meghanada-java-path (expand-file-name "bin/java.exe" (getenv "JAVA_HOME")))
      (setq meghanada-maven-path "mvn.cmd"))
    (t
      (setq meghanada-java-path "java")
      (setq meghanada-maven-path "mvn")))
#+end_src

doom-modeline
https://github.com/seagle0128/doom-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))

  (use-package all-the-icons
    :ensure t)
  ;(all-the-icons-install-fonts)
#+end_src

rainbow-delimiters
https://github.com/Fanael/rainbow-delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

which-key
https://github.com/justbur/emacs-which-key
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idel-delay 0.3))
#+end_src

move-text
https://github.com/emacsfodder/move-text
#+begin_src emacs-lisp
  (use-package move-text
      :bind (("M-<up>" . move-text-up)
       ("M-<down>" . move-text-down)))
#+end_src

ivy
https://github.com/abo-abo/swiper
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
     :map ivy-minibuffer-map
     ("TAB" . ivy-alt-done)
     ("C-l" . ivy-alt-done)
     ("C-j" . ivy-next-line)
     ("C-k" . ivy-previous-line)
     :map ivy-switch-buffer-map
     ("C-k" . ivy-previous-line)
     ("C-l" . ivy-done)
     ("C-d" . ivy-switch-buffer-kill)
     :map ivy-reverse-i-search-map
     ("C-k" . ivy-previous-line)
     ("c-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))
#+end_src

counsel
https://github.com/abo-abo/swiper
#+begin_src emacs-lisp
  (use-package counsel 
    :bind (("M-x" . counsel-M-x)
	   ("C-x b" . counsel-ibuffer)
	   ("C-x C-f" . counsel-find-file)
	   :map minibuffer-local-map
	   ("C-r" . counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil))
#+end_src

ivy-rich
https://github.com/Yevgnen/ivy-rich
#+begin_src emacs-lisp
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src

helpful
https://github.com/Wilfred/helpful
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

doom-themes
https://github.com/doomemacs/themes
#+begin_src emacs-lisp
  (use-package doom-themes)
#+end_src

